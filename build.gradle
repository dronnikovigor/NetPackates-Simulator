plugins {
    // Apply the java plugin to add support for Java
    id 'java'
}

repositories {
    jcenter()
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation files('lib/one-transport-ut2-0.2.8.jar')
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'org.jetbrains:annotations:16.0.2'
    implementation 'net.sf.trove4j:trove4j:3.0.3'
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-core:4.4.1'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

// tasks for cpp build

def tunnelBuildDir = './tunnel/build'
def clientBuildDir = './client/build'

task cmakeTunnel(type: Exec) {
    workingDir tunnelBuildDir
    doFirst {
        println commandLine.toString()
    }
    commandLine 'sh', 'cmake.sh'
    doLast {
        println 'Cmake done: tunnel'
    }
}

task cmakeClient(type: Exec) {
    workingDir clientBuildDir
    doFirst {
        println commandLine.toString()
    }
    commandLine 'sh', 'cmake.sh'
    doLast {
        println 'Cmake done: client'
    }
}

task buildTunnel(type: Exec) {
    workingDir tunnelBuildDir
    doFirst {
        println commandLine.toString()
    }
    commandLine 'make'

    doLast {
        println 'Make done: tunnel'
    }
}

task buildClient(type: Exec) {
    workingDir clientBuildDir
    doFirst {
        println commandLine.toString()
    }
    commandLine 'make'
    doLast {
        println 'Make done: client'
    }
}

// build cpp library during building the project
build.dependsOn ordered(":cmakeTunnel", ":cmakeClient", ":buildTunnel", ":buildClient")

def ordered(String... dependencyPaths) {
    def dependencies = dependencyPaths.collect { tasks.getByPath(it) }
    for (int i = 0; i < dependencies.size() - 1; i++) {
        dependencies[i + 1].mustRunAfter(dependencies[i])
    }
    return dependencies
}
